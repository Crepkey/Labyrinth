import os
import platform


#Initializing

try:
    from msvcrt import getch #For windows
except ImportError: #For linux and maybe mac...
    
    def getch(): #The function is responsible for the key input detection
    
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch

def pressedkey():
    return getch()

def update():
    if platform.system() == 'Linux':
       os.system('clear')
       maze_printing()
       player_pos()

#Maze Matrix

maze =[
['a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','E','E','E','a',],
['8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',],
['8',' ',' ',' ','8',' ',' ',' ','a','a','a','a','a','a','a','a','a',' ',' ',' ','8',' ',' ',' ','a','a','a','a','a',' ',' ',' ','a','a','a','a','8','a','a','a','a',' ',' ',' ','a','a','a','a','8',' ',' ',' ','a','a','a','a','a',' ',' ',' ','a','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8',],
['8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',],
['8','a','a','a','a','a','a','a','a',' ',' ',' ','a',' ',' ',' ','8','a','a','a','a','a','a','a','8',' ',' ',' ','8','a','a','a','a','a','a','a','a',' ',' ',' ','8','a','a','a','a',' ',' ',' ','a',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8','a','a','a','a','a','a','a','8',' ',' ',' ','8',],
['8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',],
['8',' ',' ',' ','a',' ',' ',' ','8','a','a','a','8','a','a','a','a','a','a','a','a',' ',' ',' ','a',' ',' ',' ','8',' ',' ',' ','a','a','a','a','a','a','a','a','8',' ',' ',' ','8','a','a','a','8',' ',' ',' ','8',' ',' ',' ','8','a','a','a','a','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8',],
['8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',],
['8',' ',' ',' ','8','a','a','a','a','a','a','a','a','a','a','a','a',' ',' ',' ','8','a','a','a','8',' ',' ',' ','8','a','a','a','a',' ',' ',' ','8',' ',' ',' ','a','a','a','a','a',' ',' ',' ','8','a','a','a','a','a','a','a','a',' ',' ',' ','8',' ',' ',' ','a','a','a','a','8',' ',' ',' ','8',],
['8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',],
['8',' ',' ',' ','a','a','a','a','a',' ',' ',' ','8','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8','a','a','a','a','a','a','a','8',' ',' ',' ','a',' ',' ',' ','a',' ',' ',' ','8',' ',' ',' ','8','a','a','a','a','a','a','a','a','a','a','a','8',],
['8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',],
['8','a','a','a','a','a','a','a','8','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','a','a','a','a','8','a','a','a','a',' ',' ',' ','8',' ',' ',' ','a','a','a','a','8',' ',' ',' ','8',' ',' ',' ','8','a','a','a','a',' ',' ',' ','8','a','a','a','a',' ',' ',' ','8',],
['8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',],
['8',' ',' ',' ','a','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8','a','a','a','a','a','a','a','a',' ',' ',' ','8','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8','a','a','a','a',' ',' ',' ','8','a','a','a','8',' ',' ',' ','a','a','a','a','8','a','a','a','a','a','a','a','a',' ',' ',' ','8',],
['8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',],
['8',' ',' ',' ','8',' ',' ',' ','a','a','a','a','8','a','a','a','a',' ',' ',' ','a',' ',' ',' ','8','a','a','a','a',' ',' ',' ','a','a','a','a','8','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8','a','a','a','a','a','a','a','a','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8',],
['8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',],
['8',' ',' ',' ','8','a','a','a','a','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8','a','a','a','8',' ',' ',' ','8','a','a','a','a','a','a','a','8',' ',' ',' ','a','a','a','a','a','a','a','a','a',' ',' ',' ','8',' ',' ',' ','8','a','a','a','a','a','a','a','8',],
['8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',],
['8',' ',' ',' ','8',' ',' ',' ','a','a','a','a','8',' ',' ',' ','8','a','a','a','8',' ',' ',' ','a','a','a','a','a',' ',' ',' ','8','a','a','a','a','a','a','a','a',' ',' ',' ','8','a','a','a','8',' ',' ',' ','a',' ',' ',' ','8','a','a','a','a','a','a','a','a',' ',' ',' ','a',' ',' ',' ','8',],
['8',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','8',' ',' ',' ','8',],
['8','E','E','E','8','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','8','a','a','a','a','a','a','a','a','a','a','a','8','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','8','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','8','a','a','a','8',]]

#printing maze

def maze_printing():
    for i in range(len(maze)):
        print("".join(maze[i]))


def player_pos():
    global pos
    del pos[:]
    for i in range(1,len(maze)):
	    if hero in maze[i]:
		    x_axis = i
		    y_axis = maze[i].index(hero)
		    pos.append(x_axis)
		    pos.append(y_axis)

#hero init

hero = '@'
hero_pos_row = 1
hero_pos_col = 2
act_char = maze[hero_pos_row][hero_pos_col]
way = ' '
pway = '.'
ex = 'E'

#start position

maze[hero_pos_row][hero_pos_col] = hero
maze_printing()

pos = []


#hero movements

while True:
    pressedkey = getch()
    if pressedkey is 'w' or pressedkey is 'W':
        next_char = maze[hero_pos_row-1][hero_pos_col]
        if next_char == way or next_char == pway:
            maze[hero_pos_row-1][hero_pos_col] = hero
            maze[hero_pos_row][hero_pos_col] = pway
            update()
            print(pos)
            hero_pos_row = hero_pos_row -1
        elif next_char == ex:
            break
        
    if pressedkey is 's' or pressedkey is 'S':
        next_char = maze[hero_pos_row+1][hero_pos_col]
        if next_char == way or next_char == pway:
            maze[hero_pos_row+1][hero_pos_col] = hero
            maze[hero_pos_row][hero_pos_col] = pway
            update()
            print(pos)
            hero_pos_row = hero_pos_row + 1
        elif next_char == ex:
            break

    if pressedkey is 'd' or pressedkey is 'D':
        next_char = maze[hero_pos_row][hero_pos_col+1]
        if next_char == way or next_char == pway:
            maze[hero_pos_row][hero_pos_col+1] = hero
            maze[hero_pos_row][hero_pos_col] = pway
            update()
            print(pos)
            hero_pos_col = hero_pos_col + 1
        elif next_char == ex:
            break

    if pressedkey is 'a' or pressedkey is 'A':
        next_char = maze[hero_pos_row][hero_pos_col-1]
        if next_char == way or next_char == pway:
            maze[hero_pos_row][hero_pos_col-1] = hero
            maze[hero_pos_row][hero_pos_col] = pway
            update()
            print(pos)
            hero_pos_col = hero_pos_col - 1
        elif next_char == ex:
            break



